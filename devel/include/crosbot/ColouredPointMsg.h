// Generated by gencpp from file crosbot/ColouredPointMsg.msg
// DO NOT EDIT!


#ifndef CROSBOT_MESSAGE_COLOUREDPOINTMSG_H
#define CROSBOT_MESSAGE_COLOUREDPOINTMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <crosbot/ColourMsg.h>

namespace crosbot
{
template <class ContainerAllocator>
struct ColouredPointMsg_
{
  typedef ColouredPointMsg_<ContainerAllocator> Type;

  ColouredPointMsg_()
    : p()
    , c()  {
    }
  ColouredPointMsg_(const ContainerAllocator& _alloc)
    : p(_alloc)
    , c(_alloc)  {
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _p_type;
  _p_type p;

   typedef  ::crosbot::ColourMsg_<ContainerAllocator>  _c_type;
  _c_type c;




  typedef boost::shared_ptr< ::crosbot::ColouredPointMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::crosbot::ColouredPointMsg_<ContainerAllocator> const> ConstPtr;

}; // struct ColouredPointMsg_

typedef ::crosbot::ColouredPointMsg_<std::allocator<void> > ColouredPointMsg;

typedef boost::shared_ptr< ::crosbot::ColouredPointMsg > ColouredPointMsgPtr;
typedef boost::shared_ptr< ::crosbot::ColouredPointMsg const> ColouredPointMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::crosbot::ColouredPointMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::crosbot::ColouredPointMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace crosbot

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'crosbot': ['/home/otan/3431/ass1/src/crosbot/crosbot/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::crosbot::ColouredPointMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::crosbot::ColouredPointMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::crosbot::ColouredPointMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::crosbot::ColouredPointMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::crosbot::ColouredPointMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::crosbot::ColouredPointMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::crosbot::ColouredPointMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d75f9aa7b2fc4712f55c6e6703f1c090";
  }

  static const char* value(const ::crosbot::ColouredPointMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd75f9aa7b2fc4712ULL;
  static const uint64_t static_value2 = 0xf55c6e6703f1c090ULL;
};

template<class ContainerAllocator>
struct DataType< ::crosbot::ColouredPointMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "crosbot/ColouredPointMsg";
  }

  static const char* value(const ::crosbot::ColouredPointMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::crosbot::ColouredPointMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point p\n\
ColourMsg c\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: crosbot/ColourMsg\n\
uint8 r\n\
uint8 g\n\
uint8 b\n\
uint8 a\n\
";
  }

  static const char* value(const ::crosbot::ColouredPointMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::crosbot::ColouredPointMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.p);
      stream.next(m.c);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct ColouredPointMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::crosbot::ColouredPointMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::crosbot::ColouredPointMsg_<ContainerAllocator>& v)
  {
    s << indent << "p: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.p);
    s << indent << "c: ";
    s << std::endl;
    Printer< ::crosbot::ColourMsg_<ContainerAllocator> >::stream(s, indent + "  ", v.c);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CROSBOT_MESSAGE_COLOUREDPOINTMSG_H
