// Generated by gencpp from file crosbot_map/GetSnapResponse.msg
// DO NOT EDIT!


#ifndef CROSBOT_MAP_MESSAGE_GETSNAPRESPONSE_H
#define CROSBOT_MAP_MESSAGE_GETSNAPRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <crosbot_map/SnapMsg.h>

namespace crosbot_map
{
template <class ContainerAllocator>
struct GetSnapResponse_
{
  typedef GetSnapResponse_<ContainerAllocator> Type;

  GetSnapResponse_()
    : snap()  {
    }
  GetSnapResponse_(const ContainerAllocator& _alloc)
    : snap(_alloc)  {
    }



   typedef  ::crosbot_map::SnapMsg_<ContainerAllocator>  _snap_type;
  _snap_type snap;




  typedef boost::shared_ptr< ::crosbot_map::GetSnapResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::crosbot_map::GetSnapResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetSnapResponse_

typedef ::crosbot_map::GetSnapResponse_<std::allocator<void> > GetSnapResponse;

typedef boost::shared_ptr< ::crosbot_map::GetSnapResponse > GetSnapResponsePtr;
typedef boost::shared_ptr< ::crosbot_map::GetSnapResponse const> GetSnapResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::crosbot_map::GetSnapResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::crosbot_map::GetSnapResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace crosbot_map

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'crosbot_map': ['/home/otan/3431/ass1/src/crosbot/crosbot_map/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'crosbot': ['/home/otan/3431/ass1/src/crosbot/crosbot/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::crosbot_map::GetSnapResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::crosbot_map::GetSnapResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::crosbot_map::GetSnapResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::crosbot_map::GetSnapResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::crosbot_map::GetSnapResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::crosbot_map::GetSnapResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::crosbot_map::GetSnapResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "86a4adda3fd70831e8e0fe6e378f3172";
  }

  static const char* value(const ::crosbot_map::GetSnapResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x86a4adda3fd70831ULL;
  static const uint64_t static_value2 = 0xe8e0fe6e378f3172ULL;
};

template<class ContainerAllocator>
struct DataType< ::crosbot_map::GetSnapResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "crosbot_map/GetSnapResponse";
  }

  static const char* value(const ::crosbot_map::GetSnapResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::crosbot_map::GetSnapResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "crosbot_map/SnapMsg snap\n\
\n\
\n\
================================================================================\n\
MSG: crosbot_map/SnapMsg\n\
Header header\n\
uint8 type\n\
int8 status\n\
uint32 id\n\
string description\n\
geometry_msgs/Pose robot    # Global to given frame\n\
geometry_msgs/Pose pose     # Robot relative\n\
\n\
sensor_msgs/Image[] images\n\
crosbot/PointCloudMsg[] clouds\n\
#crosbot/ColouredCloudMsg[] colouredClouds\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: sensor_msgs/Image\n\
# This message contains an uncompressed image\n\
# (0, 0) is at top-left corner of image\n\
#\n\
\n\
Header header        # Header timestamp should be acquisition time of image\n\
                     # Header frame_id should be optical frame of camera\n\
                     # origin of frame should be optical center of cameara\n\
                     # +x should point to the right in the image\n\
                     # +y should point down in the image\n\
                     # +z should point into to plane of the image\n\
                     # If the frame_id here and the frame_id of the CameraInfo\n\
                     # message associated with the image conflict\n\
                     # the behavior is undefined\n\
\n\
uint32 height         # image height, that is, number of rows\n\
uint32 width          # image width, that is, number of columns\n\
\n\
# The legal values for encoding are in file src/image_encodings.cpp\n\
# If you want to standardize a new string format, join\n\
# ros-users@lists.sourceforge.net and send an email proposing a new encoding.\n\
\n\
string encoding       # Encoding of pixels -- channel meaning, ordering, size\n\
                      # taken from the list of strings in include/sensor_msgs/image_encodings.h\n\
\n\
uint8 is_bigendian    # is this data bigendian?\n\
uint32 step           # Full row length in bytes\n\
uint8[] data          # actual matrix data, size is (step * rows)\n\
\n\
================================================================================\n\
MSG: crosbot/PointCloudMsg\n\
Header header\n\
geometry_msgs/Point[] points	# The points in the cloud.\n\
ColourMsg[] colours				# The colours of the points. Can be empty.\n\
================================================================================\n\
MSG: crosbot/ColourMsg\n\
uint8 r\n\
uint8 g\n\
uint8 b\n\
uint8 a\n\
";
  }

  static const char* value(const ::crosbot_map::GetSnapResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::crosbot_map::GetSnapResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.snap);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct GetSnapResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::crosbot_map::GetSnapResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::crosbot_map::GetSnapResponse_<ContainerAllocator>& v)
  {
    s << indent << "snap: ";
    s << std::endl;
    Printer< ::crosbot_map::SnapMsg_<ContainerAllocator> >::stream(s, indent + "  ", v.snap);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CROSBOT_MAP_MESSAGE_GETSNAPRESPONSE_H
