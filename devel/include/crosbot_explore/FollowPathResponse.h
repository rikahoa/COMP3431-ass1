// Generated by gencpp from file crosbot_explore/FollowPathResponse.msg
// DO NOT EDIT!


#ifndef CROSBOT_EXPLORE_MESSAGE_FOLLOWPATHRESPONSE_H
#define CROSBOT_EXPLORE_MESSAGE_FOLLOWPATHRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace crosbot_explore
{
template <class ContainerAllocator>
struct FollowPathResponse_
{
  typedef FollowPathResponse_<ContainerAllocator> Type;

  FollowPathResponse_()
    {
    }
  FollowPathResponse_(const ContainerAllocator& _alloc)
    {
    }






  typedef boost::shared_ptr< ::crosbot_explore::FollowPathResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::crosbot_explore::FollowPathResponse_<ContainerAllocator> const> ConstPtr;

}; // struct FollowPathResponse_

typedef ::crosbot_explore::FollowPathResponse_<std::allocator<void> > FollowPathResponse;

typedef boost::shared_ptr< ::crosbot_explore::FollowPathResponse > FollowPathResponsePtr;
typedef boost::shared_ptr< ::crosbot_explore::FollowPathResponse const> FollowPathResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::crosbot_explore::FollowPathResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::crosbot_explore::FollowPathResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace crosbot_explore

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/indigo/share/nav_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::crosbot_explore::FollowPathResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::crosbot_explore::FollowPathResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::crosbot_explore::FollowPathResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::crosbot_explore::FollowPathResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::crosbot_explore::FollowPathResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::crosbot_explore::FollowPathResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::crosbot_explore::FollowPathResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const ::crosbot_explore::FollowPathResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::crosbot_explore::FollowPathResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "crosbot_explore/FollowPathResponse";
  }

  static const char* value(const ::crosbot_explore::FollowPathResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::crosbot_explore::FollowPathResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
";
  }

  static const char* value(const ::crosbot_explore::FollowPathResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::crosbot_explore::FollowPathResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream&, T)
    {}

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct FollowPathResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::crosbot_explore::FollowPathResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream&, const std::string&, const ::crosbot_explore::FollowPathResponse_<ContainerAllocator>&)
  {}
};

} // namespace message_operations
} // namespace ros

#endif // CROSBOT_EXPLORE_MESSAGE_FOLLOWPATHRESPONSE_H
